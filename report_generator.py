# report_generator.py

def generate_report(analysis_dict):
    report = f"""
📈 NVIDIA Daily Report
-------------------------
Price: ${analysis_dict['price']} ({analysis_dict['change']})
RSI: {analysis_dict['rsi']} → {'Overbought' if analysis_dict['rsi'] > 70 else 'Neutral'}
MACD: {analysis_dict['macd_signal']}

📰 News Sentiment: {analysis_dict['news_sentiment']}
💬 Reddit Sentiment: {analysis_dict['reddit_sentiment']}
📄 SEC Filing: {analysis_dict['sec_summary']}

🔔 Final Recommendation: **{analysis_dict['final_signal']}**
-------------------------
Generated by NVIDIA Robo Advisor AI
"""
    return report


# notifier_email.py
import os
import smtplib
from email.mime.text import MIMEText
from dotenv import load_dotenv

load_dotenv()

def send_email_via_smtp(report_str):
    sender = os.getenv("EMAIL_ADDRESS")
    password = os.getenv("EMAIL_PASSWORD")
    recipient = os.getenv("RECIPIENT")

    msg = MIMEText(report_str)
    msg['Subject'] = '📈 NVIDIA Daily Investment Report'
    msg['From'] = sender
    msg['To'] = recipient

    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
            server.login(sender, password)
            server.sendmail(sender, recipient, msg.as_string())
        print("✅ Email sent.")
    except Exception as e:
        print("❌ Email failed:", e)


# notifier_slack.py
import os
import requests
from dotenv import load_dotenv

load_dotenv()

def send_slack_message(report_str):
    webhook_url = os.getenv("SLACK_WEBHOOK_URL")
    payload = {"text": report_str}

    try:
        res = requests.post(webhook_url, json=payload)
        if res.status_code == 200:
            print("✅ Slack message sent.")
        else:
            print("❌ Slack failed:", res.text)
    except Exception as e:
        print("❌ Slack error:", e)


# notifier_sms.py
# import os
# from twilio.rest import Client
# from dotenv import load_dotenv

# load_dotenv()

# def send_sms_via_twilio(report_str):
#     account_sid = os.getenv("TWILIO_SID")
#     auth_token = os.getenv("TWILIO_AUTH_TOKEN")
#     from_number = os.getenv("TWILIO_PHONE")
#     to_number = os.getenv("MY_PHONE")

#     client = Client(account_sid, auth_token)

#     try:
#         message = client.messages.create(
#             body=report_str[:1600],  # SMS limit
#             from_=from_number,
#             to=to_number
#         )
#         print("✅ SMS sent.")
#     except Exception as e:
#         print("❌ SMS failed:", e)
